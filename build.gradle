buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:$asciidoctorGradlePluginVersion"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0"

    }
}

version "2.0.1"
group "org.grails.plugins"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"
apply from: "${rootProject.projectDir}/gradle/docs.gradle"
apply plugin: 'org.asciidoctor.convert'
apply plugin: "com.jfrog.artifactory"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    provided "org.springframework.boot:spring-boot-starter-logging"
    provided "org.springframework.boot:spring-boot-starter-actuator"
    provided "org.springframework.boot:spring-boot-autoconfigure"
    provided "org.springframework.boot:spring-boot-starter-tomcat"

    provided "org.grails:grails-web-boot"
    provided "org.grails:grails-dependencies"

    testCompile "org.grails:grails-plugin-testing"

    console "org.grails:grails-console"

    profile "org.grails.profiles:web-plugin"
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}
// enable if you wish to package this plugin as a standalone application
bootRepackage.enabled = false
grailsPublish {
    user = System.getenv('BINTRAY_USER') ?: project.bintrayUser
    key = System.getenv('BINTRAY_KEY') ?: project.bintrayKey
    portalUser = System.getenv('GRAILS_PORTAL_USER') ?: project.grailsPortalUser
    portalPassword = System.getenv('GRAILS_PORTAL_PASSWORD') ?: project.grailsPortalPassword
    repo = 'plugins'
    userOrg = "grails"
    githubSlug = 'grails-plugins/cache-headers'
    license {
        name = 'Apache-2.0'
    }
    title = 'Grails Cache Headers Plugin'
    desc = 'Improve your application performance with browser caching, with easy ways to set caching headers\n' +
            'in controller responses'
    developers = [sdelamo: 'Sergio del Amo']
}


artifactory {
    contextUrl = 'http://oss.jfrog.org'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = System.getenv("BINTRAY_USER") ?: project.bintrayUser
            password = System.getenv("BINTRAY_KEY") ?: project.bintrayKey
        }
        defaults {
            publications('maven')
        }
    }
}

task docs {
    dependsOn 'asciidoctor'
}

jar {
    exclude "*TestController**"
}

// gradle test or gradle integrationTest
tasks.withType(Test) {
    testLogging {

        // default logging
        events "passed", "failed", "skipped"
        displayGranularity 3

        // verbose logging "-i"
        info {
            events "passed", "failed", "skipped", "standardOut", "standardError"
            displayGranularity = 2
        }
    }
}
